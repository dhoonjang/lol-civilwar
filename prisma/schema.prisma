// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

enum Position {
  TOP
  JUNGLE
  MID
  ADC
  SUPPORT
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   Boolean?
  image           String?
  accounts        Account[]

  summonerName    String?   @unique
  puuid           String?   @unique
  tier            Int?
  position        Position?
  subPosition     Position?

  relationPoint   Int @default(0)
  battlePoint     Int @default(0)
  pointUpdateTime  DateTime @default(now())

  comments    Comment[]
  participants Participant[]
  bettors Bettor[]

  writedComments  Comment[] @relation("Writer")
}

model Comment {
  id              String @id @default(cuid())

  matchId         String
  matchTimestamp  Int

  userId          String
  writerId        String
  comment         String
  properTier      Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  writer  User @relation("Writer", fields: [writerId], references: [id], onDelete: Cascade)

  @@unique([userId, matchId, writerId])
  @@index([userId])
  @@index([writerId])
}

enum CivilWarStatus {
  TEAM_BUILDING
  BATTING
  STARTED
  END
}

model CivilWar {
  id            String @id @default(cuid())
  status        CivilWarStatus @default(TEAM_BUILDING)
  participants  Participant[]
  teams         CivilWarTeam[]
}

model CivilWarTeam {
  id            String @id @default(cuid())
  civilWarId    String
  
  civilWar  CivilWar @relation(fields: [civilWarId], references: [id], onDelete: Cascade)
  members Participant[]
  bettors Bettor[]

  @@index([civilWarId])
}

model Bettor {
  id             String @id @default(cuid())
  userId         String
  civilWarTeamId String
  batPoint       Int
  totalPoint     Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  civilWarTeam CivilWarTeam @relation(fields: [civilWarTeamId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([civilWarTeamId])
}

model Participant {
  id              String @id @default(cuid())
  civilWarId      String
  userId          String
  civilWarTeamId  String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  civilWar CivilWar @relation(fields: [civilWarId], references: [id], onDelete: Cascade)
  civilWarTeam CivilWarTeam? @relation(fields: [civilWarTeamId], references: [id], onDelete: Cascade)

  @@index([civilWarId])
  @@index([userId])
  @@index([civilWarTeamId])
}