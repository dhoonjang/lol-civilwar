// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

enum Position {
  TOP
  JUNGLE
  MID
  ADC
  SUPPORT
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   Boolean?
  image           String?
  accounts        Account[]

  summonerName    String?   @unique
  puuid           String?   @unique
  tier            Int?
  position        Position?
  subPosition     Position?

  relationPoint   Int @default(0)
  battlePoint     Int @default(0)
  pointUpdateTime DateTime @default(now())

  participants    Participant[]
  bettors         Bettor[]
  writedComments  Comment[] @relation("Writer")
}

model Comment {
  id             String @id @default(cuid())

  participantId  String
  writerId       String
  comment        String
  properTier     Int
  createdAt      DateTime @default(now())

  writer         User @relation("Writer", fields: [writerId], references: [id], onDelete: Cascade)
  participant    Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@unique([participantId, writerId])
  @@index([writerId])
  @@index([participantId])
}

enum MatchStatus {
  EXTERNAL
  BATTING
  STARTED
  END
}

model Match {
  id              String @id @default(cuid())
  status          MatchStatus
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  timestamp       DateTime?
  duration        Int?

  participants    Participant[]
  bettors         Bettor[]

  @@unique([id])
}

enum TeamType {
  RED
  BLUE
}

model Bettor {
  id             String @id @default(cuid())
  userId         String
  matchId        String

  batTeam        TeamType
  batPoint       Int

  user           User @relation(fields: [userId], references: [id], onDelete: Cascade)
  match          Match @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@unique([matchId, userId])
  @@index([userId])
  @@index([matchId])
}

model Participant {
  id              String @id @default(cuid())
  puuid           String
  matchId         String

  team            TeamType?
  win             Boolean?
  championName    String?
  summonerName    String?
  kills           Int?
  assists         Int?
  deaths          Int?

  match           Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
  user            User? @relation(fields: [puuid], references: [puuid], onDelete: Cascade)
  comments        Comment[]

  @@unique([matchId, puuid])
  @@index([matchId])
  @@index([puuid])
}