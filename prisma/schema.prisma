// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Guild {
  id          String @id @default(cuid())

  serverId    String @unique

  name        String
  icon        String?

  members     Member[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Permission {
  OWNER
  MEMBER
}

model Member {
  id            String @id @default(cuid())

  permission    Permission
  guildId       String
  summonerId    String

  guild         Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
  summoner      Summoner @relation(fields: [summonerId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([guildId, summonerId])
  @@index([guildId])
  @@index([summonerId])
}


model Summoner {
  id              String @id @default(cuid())
  discordId       String @unique

  name            String

  summonerStats   SummonerStat[]
  positions       Position[]
  riotAccounts    RiotAccount[]
  members         Member[]
  participants    Participant[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([discordId])
}

model SummonerStat {
  summonerId  String
  statName    String
  value       Int

  sumnoner    Summoner @relation(fields: [summonerId], references: [id], onDelete: Cascade)

  @@unique([summonerId, statName])
}

enum PositionType {
  TOP
  JUNGLE
  MIDDLE
  BOTTOM
  UTILITY
}

model Position {
  summonerId  String
  weight      Int
  position    PositionType

  sumnoner    Summoner @relation(fields: [summonerId], references: [id], onDelete: Cascade)

  @@unique([summonerId, position])
}

model RiotAccount {
  id          String @id
  puuid       String @unique
  summonerId  String

  summoner    Summoner @relation(fields: [summonerId], references: [id], onDelete: Cascade)

  @@index([summonerId])
  @@index([puuid])
}

enum MatchType {
  EXTERNAL
  INTERNAL
}

enum MatchStatus {
  BATTING
  STARTED
  END
}

model Match {
  id              String @id @default(cuid())
  
  type            MatchType
  status          MatchStatus

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  timestamp       DateTime
  duration        Int?

  participants    Participant[]

  @@unique([id])
}

model Participant {
  id              String @id @default(cuid())

  puuid           String?
  summonerId      String?
  matchId         String

  win             Boolean?
  championName    String?
  summonerName    String?
  kills           Int?
  assists         Int?
  deaths          Int?
  position        PositionType?
  
  magicDamage     Int?
  physicalDamage  Int?
  trueDamage      Int?

  match           Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
  summoner        Summoner? @relation(fields: [summonerId], references: [id], onDelete: Cascade)

  @@unique([matchId, summonerId])
  @@index([matchId])
  @@index([summonerId])
}